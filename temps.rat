=> biquaddf2 (a1, a2, b0, b1, b2) =>
	in
	/+ @oc @od
	^ Z *b0
	(^ Z *a1 *b1) (/+ @oa @ob)
	(^ *a2 *b2) @xc @xa out
	@xd @xb

biquadOsc (k) =>
	/+ @oa @ob
	Z '-1f32'
	(^ Z '1f32' *k out)
	(*'-1f32') (@xb)
	@xa

digitalWaveguide (c) =>
	Z @oa
	^ (/+ @0 @of) (@xb)
	* c
	^ (/+ @0 @ob) (@xd)
	(Z '1f32')
	^ (* '-1f32') @xf
	/+ @0 @od
	^ (out) (@xa)

agwn =>
	~'|v: Sender<f32>|{loop{let Closed01(val) = random::<Closed01<f32>>();v.send(val)}}'
	out

brown =>
	agwn
	* '2f32'
	/+ '-1f32' @0 @oa
	(^ (Z) out)
	@xa

audioFilter
	pulseSource 48000, 512
	?'|mut a, b| {for c in a { for d in c.iter() { b.send(d.clone()) } } }'
	biquaddf2 '0.9427615784986199', '-0.33326621039701554', '0.5690069472239089', '-1.1380138944478178', '0.5690069472239089'
	?'|mut a: Messages<f32>, b: Sender<Vec<f32>>|{loop{b.send(range(0,512).map(|_| a.next().unwrap()).collect())}}'
	,&'|x|{complex::Cmplx::new(*x, 0f32)}'
	fft 512, 0
	,&'|x|{x.norm().abs()}'
	,vidSink

#=> spectrogram
	in
	fft 512, 0
	,& '|x|{x.norm().abs()}'
	,/+ @oa @ob
	^ (,Z) (,vidSink)
	(^ (,*'vec([-5e-4f32,..512])') (@xa))
	@xb#

#scratchpad
	digitalWaveguide '(6.28f32 * 1e3/48e3f32).cos()'
	vidSink 512#

main
	rtlSourceCmplx (4339e5, 200, 256e3)
	(,&'|x|{x.norm().abs()}')
	trigger
	discretize
	rle
	dle 256e3
	^ (?'|mut a,b| {a.map(|x| {match x { (1, 2e-4..6e-4) => match a.next().unwrap() { (0, 1.5e-3..2.5e-3) => b.send(Some(0u)), (0, 3.5e-3..4.5e-3) => b.send(Some(1u)), _ => b.send(None)}, _ => b.send(None)}}).last();()}') (?'|mut a,b| {a.map(|x| {match x {(1, ref d@125e-6..250e-6) | (1, ref d @500e-6..650e-6) => {match a.next().unwrap() {(0, ref e @500e-6..650e-6) | (0, ref e@125e-6..250e-6) => b.send(Some(if d > e {1u} else {0u})),_ => b.send(None)}}, _ => b.send(None)}}).last();()}')
	$36 $24
	(^ B[4,8,4,12,8] B[4,8,2,10,12]) !'|mut x|{x.push(0); x}'
	(&'|x| {if *x.get(0) == 5 {Some(x)} else {None}}') (&'|x| {if *x.get(0) != 5 {Some(x)} else {None}}') (@xc)
	? ?
	,&'|&x| {x as f32}' (,&'|&x| {x as f32}')
	,* 'vec!(1., 1., 1., 1e-1, 1.)' ,* 'vec!(1., 1., 1., 1e-1, 1e-1)' ,&'|&x| {x as f32}' @oc
	%
	differentiator
	&'|x| {(time::get_time().sec, x)}'
	printSink

