{
	@_ = require "underscore"
}

start =
	n: network+ { n }

name =
	$([+\*\&\>\<\-a-zA-Z"]+[0-9]*)

value =
	$("-"?"0."?[a-zA-Z0-9']+","? " "?)+

ref =
	" "? "(" " "?r:ref " "? ")" " "? {r}
	/ " " r:ref " "? {r}
	/ "."r:$("-"? [0-9]+) {parseInt(r)}

args =
	" "? v:$("-"?[a-z0-9\'][a-z0-9\'\-]*","?" "?)+ " "? {v}
	/ " "? "(" v:$value ")" " "? {v}

modif = " "? op:[v^] " " {op}
	/ op:"/" {op}

proc =
	"(" n: name a: args ")" { {"proc": n, "args": a, "pos":{"x":line(), "y":column()}} }
	/ " "? "(" " "? p:proc " "? ")" " "? {p}
	/ n: name a: args { {"proc": n, "args": a, "pos":{"x":line(), "y":column()}} }
	/ n: name r: ref+ { {"proc":n, "refs": r, "pos":{"x":line(), "y":column()}} }
	/ n: name { {"proc": n, "pos":{"x":line(), "y":column()} }}

expr =
	" "? "(" " "? e:expr " "? ")" " "? {e}
	/ p: proc {p}
	/ d: modif rp: proc {@_.extend(rp, {"modif": d})}
	/ "(" " "? d: modif  rp:(proc " "?)+ " "? ")" {
		if d != "/"
			@_.union rp[0][0], (@_.extend(p[0], {"modif":d}) for p in rp when (rp.indexOf p) > 0)
		else
			(@_.extend(p[0], {"modif":d}) for p in rp)
	}

line =
	"\t" " "* ea:(expr " "?)+ "\n"{@_.without(@_.flatten(ea), null, " ")}

network =
	i:"=>"? " "? id:name args:args?" "? o:"=>"? "\n" lines:line* "\n" {{"name": id, "in":(i == "=>"), "out": (o == "=>"), "const": args, "lines": lines}}
