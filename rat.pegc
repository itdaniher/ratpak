{
	@_ = require "underscore"
	@start = 0
	@row = 0
}

start =
	n: network+ { n }

proto =
	p: name {@start = line(); p}

argless =
	"Z"
	/ "%"
	/ "\""

name =
	$("." name)
	/ [,*+?%><&!$]
	/ aname

aname =
	a: $([\-a-zA-Z]+[0-9]*)
	/ a: $("-"?[a-zA-Z]+[0-9]*)

names =
	"(" " "? ns:$((n:name ","? " "?{n})+) " "? ")" {ns.split(", ")}

float =
	f: $("-"?"0."?[-e0-9]+) {parseFloat(f)}

int =
	i: $("-"? [0-9]+) {parseInt(i)}

str =
	"'" s:$([a-zA-Z0-9]+) "'" {s}
	/ "'" s:$([^']+) "'" {s}

values =
	"(" " "? v:(values+) " "? ")" ","? " "? {v}
	/ (f:float ","? " "?{f})+
	/ (i:int ","? " "?{i})+
	/ (s:str ","? " "?{s})+
	/ "[" " "? v:values " "? "]" {[v]}
	/ aname

ref =
	" "? "(" " "? r:ref " "? ")" " "? {r}
	/ " " r:ref " "? {r}
	/ "." r:int {r}

args =
	" "? "(" a:args ")" " "? {a}
	/ " "? v:values " "? {if typeof(v) != 'string' then ((if x.length == 1 then x[0] else x) for x in v) else v}

modif =
	" "? op:"^" " " {op}
	/ op:"/" {op}

proc =
	" "? "(" " "? p:proc " "? ")" " "? {p}
	/ n: argless { @row += 1;{"proc": n, "y":line() - @start, "x":@row, "refs":[], "args": []}}
	/ n: name r: ref+ { @row += 1;{"proc":n, "refs": r, "y":line() - @start, "x":@row, "args": []} }
	/ n: name a: args { @row += 1;{"proc": n, "args": a, "y":line() - @start, "x":@row, "refs":[]} }
	/ n: name { @row += 1;{"proc": n, "y":line() - @start, "x":@row, "refs":[],args:[] }}

expr =
	" "? "(" " "? e:expr " "? ")" " "? {e}
	/ p: proc {p}
	/ d: modif  rp:(proc " "?)+ {
		if d != "/"
			@_.union rp[0][0], (@_.extend(p[0], {"modif":d}) for p in rp when (rp.indexOf p) > 0)
		else
			(@_.extend(p[0], {"modif":d}) for p in rp)
	}

line =
	"\t" " "* ea:(expr " "?)+ "\n"{@row = 0; @_.without(@_.flatten(ea), null, " ")}

network =
	i:"=>"? " "? id:proto " "? args:names? " "? o:"=>"? "\n" lines:line+ "\n" {{"name": id, "in":(i == "=>"), "out": (o == "=>"), "const": args, "lines": lines}}
